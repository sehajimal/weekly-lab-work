a) Based on the quantitative evidence from the investigation I believe that it depends on 2 factors wheather or not it is a good idea to remove function calls from a program. These 2 factors are the performance and the code structure/modularity. The investigation clearly showed that there is increased performance without the use of functions however this increase is quite small. By using macros instead of functions the code becomes less modular and we are not abiding by the divide and conquer principal. Not only is it easier to read code with functions, it group related data together which improves flexivility. Hence, I believe that this depends on what you are looking for. If you want improved performance and do not care about the readability of code then use macros. However if you care about modularity then use functions becuase the improved performance is already so small

b) When speaking about performance we saw better results by using parameterized macros which is shown with the smaller running time. However this difference is almost barley noticable, so it ultimatley comes down to what you might perfer. By simply hardcoding it can cause the code to become more unclear if the macro defination is large. However in this example the code is still easily understandable. But in cases where a macro is long it might be challenging to implement that in code. It can cause longer code and code that is less flexible than simply using a macro. For example if you need to use a macro twice you simply use the macro which is only defined once. But if you have the equivalent code, writing that out twice can be a drag and lead to more messy code.  

c) Improving the algorithm gave better performance and this is clear as shown in the reuced running time. At first I was confused at how fast it was running, 0.4 second and 0.3. However this shows that by improving the algorithm you can improve the performance by a lot. Based on the evidence of the gprof report when looking at the results after removing the function calls, the highest percentage time was around 75% whereas by improving the algorithm the highest percentage time was around 30% which is a big difference. This ensures that a function is not taking up most of the time and function calls are also lower. Overall we have fewer iterations since the algorithm is better which results in better performance.

d) Maybe if you cannot change the algorithm for better purposes or if the code in the function is not something that is major. Meaning if the function just checks for one thing it can simply be changed to a macro or equiavalent code which would make it a good idea to remove the function. Another situation could be if the function is being called multiple times in the code as this will effect the performance and by simply replacing this with a macro could be a good idea. However we should note that it is very important to always try to improve the algorithm before anything else.


